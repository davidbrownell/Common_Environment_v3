# --------------------------------------------------------------------------------
# |
# |  WARNING:
# |  This file was generated; any local changes will be overwritten during
# |  future invocations of the generator!
# |
# |  Generated by: Plugins/Impl/PythonSerializationImpl.py
# |  Generated on: 2019-05-23 12:10:45.260014
# |
# --------------------------------------------------------------------------------
import copy
import sys

from collections import OrderedDict

import six

import CommonEnvironment
from CommonEnvironment.TypeInfo import Arity
from CommonEnvironment.TypeInfo.AnyOfTypeInfo import AnyOfTypeInfo
from CommonEnvironment.TypeInfo.ClassTypeInfo import ClassTypeInfo
from CommonEnvironment.TypeInfo.DictTypeInfo import DictTypeInfo
from CommonEnvironment.TypeInfo.GenericTypeInfo import GenericTypeInfo
from CommonEnvironment.TypeInfo.ListTypeInfo import ListTypeInfo

from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.PythonCodeVisitor import PythonCodeVisitor

# <Unused import> pylint: disable = W0611
# <Unused import> pylint: disable = W0614
from CommonEnvironment.TypeInfo.FundamentalTypes.All import *               # <Wildcard import> pylint: disable = W0401

# <Standard import should be placed before...> pylint: disable = C0411

# ----------------------------------------------------------------------
import json

from CommonEnvironment import FileSystem
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.JsonSerialization import JsonSerialization

# ----------------------------------------------------------------------
class JsonEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Object):
            d = copy.deepcopy(o.__dict__)

            for k in list(six.iterkeys(d)):
                if k.startswith("_"):
                    del d[k]

            return d

        return getattr(o, "__dict__", o)


# ----------------------------------------------------------------------
# <Method name "..." doesn't conform to PascalCase naming style> pylint: disable = C0103
# <Line too long> pylint: disable = C0301
# <Too many lines in module> pylint: disable = C0302
# <Wrong hanging indentation> pylint: disable = C0330

# <Too few public methods> pylint: disable = R0903
# <Too many public methods> pylint: disable = R0904
# <Too many branches> pylint: disable = R0912
# <Too many statements> pylint: disable = R0915


# ----------------------------------------------------------------------
class SerializationException(Exception):
    def __init__(self, ex_or_string):
        if isinstance(ex_or_string, six.string_types):
            super(SerializationException, self).__init__(ex_or_string)
        else:
            super(SerializationException, self).__init__(str(ex_or_string))

            self.__dict__ = copy.deepcopy(ex_or_string.__dict__)


class UniqueKeySerializationException(SerializationException):              pass
class SerializeException(SerializationException):                           pass
class DeserializeException(SerializationException):                         pass


class DoesNotExist(object):                                                 pass


# ----------------------------------------------------------------------
# |
# |  Utility Methods
# |
# ----------------------------------------------------------------------
def Serialize(
    root,
    process_additional_data=False,
    always_include_optional=False,
    to_string=False,
    pretty_print=False,
):
    """Convenience method that serializes all top-level elements"""

    # No convenience conversions

    result = _CreatePythonObject(
            attributes=None,
        )

    this_result = Serialize_Commit(
        root,
        is_root=True,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,

    )
    if this_result is not DoesNotExist:
        setattr(result, "Commit", this_result)
    elif always_include_optional:
        setattr(result, "Commit", None)

    this_result = Serialize_Push(
        root,
        is_root=True,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,

    )
    if this_result is not DoesNotExist:
        setattr(result, "Push", this_result)
    elif always_include_optional:
        setattr(result, "Push", None)

    this_result = Serialize_Pushed(
        root,
        is_root=True,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,

    )
    if this_result is not DoesNotExist:
        setattr(result, "Pushed", this_result)
    elif always_include_optional:
        setattr(result, "Pushed", None)

    if to_string:
            result = _JsonToString(result, pretty_print)

    return result


# ----------------------------------------------------------------------
def Deserialize(
    root,
    process_additional_data=False,
    always_include_optional=False,
):
    """Convenience method that deserializes all top-level elements"""

    if isinstance(root, six.string_types):
            if FileSystem.IsFilename(root):
                with open(root) as f:
                    root = json.load(f)
            else:
                root = json.loads(root)

    result = _CreatePythonObject(
            attributes=None,
        )

    this_result = Deserialize_Commit(
        root,
        is_root=True,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,

    )
    if this_result is not DoesNotExist:
        setattr(result, "Commit", this_result)
    elif always_include_optional:
        setattr(result, "Commit", None)

    this_result = Deserialize_Push(
        root,
        is_root=True,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,

    )
    if this_result is not DoesNotExist:
        setattr(result, "Push", this_result)
    elif always_include_optional:
        setattr(result, "Push", None)

    this_result = Deserialize_Pushed(
        root,
        is_root=True,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,

    )
    if this_result is not DoesNotExist:
        setattr(result, "Pushed", this_result)
    elif always_include_optional:
        setattr(result, "Pushed", None)

    return result


# ----------------------------------------------------------------------
def Serialize_Commit(
    item,
    process_additional_data=False,
    always_include_optional=False,
    to_string=False,
    pretty_print=False,
    is_root=False,
):
    """Serializes 'Commit' from a python object to a JSON object"""

    if not isinstance(item, list):
        if isinstance(item, dict) and "Commit" in item:
            item = item["Commit"]
        elif not isinstance(item, dict) and hasattr(item, "Commit"):
            item = getattr(item, "Commit")
        elif is_root:
            item = DoesNotExist

    try:
        try:
            item = Serializer().Commit(
                item,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("Commit")
    except SerializationException:
        raise
    except Exception as ex:
        raise SerializeException(ex)

    if to_string and item not in [DoesNotExist, None]:
        item = _JsonToString(item, pretty_print)

    return item


# ----------------------------------------------------------------------
def Serialize_Push(
    item,
    process_additional_data=False,
    always_include_optional=False,
    to_string=False,
    pretty_print=False,
    is_root=False,
):
    """Serializes 'Push' from a python object to a JSON object"""

    if not isinstance(item, list):
        if isinstance(item, dict) and "Push" in item:
            item = item["Push"]
        elif not isinstance(item, dict) and hasattr(item, "Push"):
            item = getattr(item, "Push")
        elif is_root:
            item = DoesNotExist

    try:
        try:
            item = Serializer().Push(
                item,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("Push")
    except SerializationException:
        raise
    except Exception as ex:
        raise SerializeException(ex)

    if to_string and item not in [DoesNotExist, None]:
        item = _JsonToString(item, pretty_print)

    return item


# ----------------------------------------------------------------------
def Serialize_Pushed(
    item,
    process_additional_data=False,
    always_include_optional=False,
    to_string=False,
    pretty_print=False,
    is_root=False,
):
    """Serializes 'Pushed' from a python object to a JSON object"""

    if not isinstance(item, list):
        if isinstance(item, dict) and "Pushed" in item:
            item = item["Pushed"]
        elif not isinstance(item, dict) and hasattr(item, "Pushed"):
            item = getattr(item, "Pushed")
        elif is_root:
            item = DoesNotExist

    try:
        try:
            item = Serializer().Pushed(
                item,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("Pushed")
    except SerializationException:
        raise
    except Exception as ex:
        raise SerializeException(ex)

    if to_string and item not in [DoesNotExist, None]:
        item = _JsonToString(item, pretty_print)

    return item


# ----------------------------------------------------------------------
def Deserialize_Commit(
    item,
    process_additional_data=False,
    always_include_optional=False,
    is_root=False,
):
    """Deserializes 'Commit' from a JSON object to a python object"""

    if isinstance(item, six.string_types):
        if FileSystem.IsFilename(item):
            with open(item) as f:
                item = json.load(f)
        else:
            item = json.loads(item)

    if not isinstance(item, list):
        if isinstance(item, dict) and "Commit" in item:
            item = item["Commit"]
        elif not isinstance(item, dict) and hasattr(item, "Commit"):
            item = getattr(item, "Commit")
        elif is_root:
            item = DoesNotExist

    try:
        try:
            item = Deserializer().Commit(
                item,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("Commit")
    except SerializationException:
        raise
    except Exception as ex:
        raise DeserializeException(ex)

    return item


# ----------------------------------------------------------------------
def Deserialize_Push(
    item,
    process_additional_data=False,
    always_include_optional=False,
    is_root=False,
):
    """Deserializes 'Push' from a JSON object to a python object"""

    if isinstance(item, six.string_types):
        if FileSystem.IsFilename(item):
            with open(item) as f:
                item = json.load(f)
        else:
            item = json.loads(item)

    if not isinstance(item, list):
        if isinstance(item, dict) and "Push" in item:
            item = item["Push"]
        elif not isinstance(item, dict) and hasattr(item, "Push"):
            item = getattr(item, "Push")
        elif is_root:
            item = DoesNotExist

    try:
        try:
            item = Deserializer().Push(
                item,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("Push")
    except SerializationException:
        raise
    except Exception as ex:
        raise DeserializeException(ex)

    return item


# ----------------------------------------------------------------------
def Deserialize_Pushed(
    item,
    process_additional_data=False,
    always_include_optional=False,
    is_root=False,
):
    """Deserializes 'Pushed' from a JSON object to a python object"""

    if isinstance(item, six.string_types):
        if FileSystem.IsFilename(item):
            with open(item) as f:
                item = json.load(f)
        else:
            item = json.loads(item)

    if not isinstance(item, list):
        if isinstance(item, dict) and "Pushed" in item:
            item = item["Pushed"]
        elif not isinstance(item, dict) and hasattr(item, "Pushed"):
            item = getattr(item, "Pushed")
        elif is_root:
            item = DoesNotExist

    try:
        try:
            item = Deserializer().Pushed(
                item,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("Pushed")
    except SerializationException:
        raise
    except Exception as ex:
        raise DeserializeException(ex)

    return item


# ----------------------------------------------------------------------
# |
# |  Type Infos
# |
# ----------------------------------------------------------------------
Commit_TypeInfo                                                             = ClassTypeInfo(OrderedDict([ ( "modified", FilenameTypeInfo(arity=Arity.FromString('*')) ), ( "added", FilenameTypeInfo(arity=Arity.FromString('*')) ), ( "removed", FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*')) ) ]), require_exact_match=True)
Push_TypeInfo                                                               = ClassTypeInfo(OrderedDict([ ( "url", UriTypeInfo(arity=Arity.FromString('?')) ) ]), require_exact_match=True)
Pushed_TypeInfo                                                             = ClassTypeInfo(OrderedDict([ ( "change", ClassTypeInfo(OrderedDict([ ( "modified", FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*')) ), ( "added", FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*')) ), ( "removed", FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*')) ) ]), require_exact_match=True, arity=Arity.FromString('*')) ) ]), require_exact_match=True)

_ChangeInfo_TypeInfo_Contents                                               = OrderedDict([("id", GenericTypeInfo()), ("author", GenericTypeInfo()), ("date", GenericTypeInfo()), ("description", GenericTypeInfo()), ("branch", GenericTypeInfo())])
_Commit_TypeInfo_Contents                                                   = OrderedDict([("modified", GenericTypeInfo(arity=Arity.FromString('*'))), ("added", GenericTypeInfo(arity=Arity.FromString('*'))), ("removed", GenericTypeInfo(arity=Arity.FromString('*'))), ("id", GenericTypeInfo()), ("author", GenericTypeInfo()), ("date", GenericTypeInfo()), ("description", GenericTypeInfo()), ("branch", GenericTypeInfo())])
_Push_TypeInfo_Contents                                                     = OrderedDict([("url", GenericTypeInfo(arity=Arity.FromString('?')))])
_Pushed_TypeInfo_Contents                                                   = OrderedDict([("change", GenericTypeInfo(arity=Arity.FromString('*')))])

_ChangeInfo_TypeInfo                                                        = AnyOfTypeInfo([ClassTypeInfo(_ChangeInfo_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_ChangeInfo_TypeInfo_Contents, require_exact_match=False)])
_ChangeInfo_id_TypeInfo                                                     = StringTypeInfo(min_length=1)
_ChangeInfo_author_TypeInfo                                                 = StringTypeInfo(min_length=1)
_ChangeInfo_date_TypeInfo                                                   = DateTimeTypeInfo()
_ChangeInfo_description_TypeInfo                                            = StringTypeInfo(min_length=0)
_ChangeInfo_branch_TypeInfo                                                 = StringTypeInfo(min_length=1)
_Commit_TypeInfo                                                            = AnyOfTypeInfo([ClassTypeInfo(_Commit_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_Commit_TypeInfo_Contents, require_exact_match=False)])
_Commit_modified_TypeInfo                                                   = FilenameTypeInfo(arity=Arity.FromString('*'))
_Commit_added_TypeInfo                                                      = FilenameTypeInfo(arity=Arity.FromString('*'))
_Commit_removed_TypeInfo                                                    = FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*'))
_Push_TypeInfo                                                              = AnyOfTypeInfo([ClassTypeInfo(_Push_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_Push_TypeInfo_Contents, require_exact_match=False)])
_Push_url_TypeInfo                                                          = UriTypeInfo(arity=Arity.FromString('?'))
_Pushed_TypeInfo                                                            = AnyOfTypeInfo([ClassTypeInfo(_Pushed_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_Pushed_TypeInfo_Contents, require_exact_match=False)])
_Pushed_change_TypeInfo                                                     = AnyOfTypeInfo([ClassTypeInfo(_Commit_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_Commit_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
_Pushed_change_modified_TypeInfo                                            = FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*'))
_Pushed_change_added_TypeInfo                                               = FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*'))
_Pushed_change_removed_TypeInfo                                             = FilenameTypeInfo(ensure_exists=False, arity=Arity.FromString('*'))

# ----------------------------------------------------------------------
# |
# |  Serializer
# |
# ----------------------------------------------------------------------
class Serializer(object):

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _ChangeInfo_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _ChangeInfo_TypeInfo.ValidateArity(item)

        result = cls._ChangeInfo_Item(item, always_include_optional, process_additional_data)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_id(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_id_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _ChangeInfo_id_TypeInfo.ValidateArity(item)

        result = cls._ChangeInfo_id_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_author(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_author_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _ChangeInfo_author_TypeInfo.ValidateArity(item)

        result = cls._ChangeInfo_author_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_date(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_date_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _ChangeInfo_date_TypeInfo.ValidateArity(item)

        result = cls._ChangeInfo_date_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_description(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _ChangeInfo_description_TypeInfo.ValidateArity(item)

        result = cls._ChangeInfo_description_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_branch(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_branch_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _ChangeInfo_branch_TypeInfo.ValidateArity(item)

        result = cls._ChangeInfo_branch_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Commit(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _Commit_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Commit_TypeInfo.ValidateArity(item)

        result = cls._Commit_Item(item, always_include_optional, process_additional_data)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Commit_modified(cls, items):
        if items in [DoesNotExist, None, []]:
            _Commit_modified_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Commit_modified_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Commit_modified_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Commit_added(cls, items):
        if items in [DoesNotExist, None, []]:
            _Commit_added_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Commit_added_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Commit_added_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Commit_removed(cls, items):
        if items in [DoesNotExist, None, []]:
            _Commit_removed_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Commit_removed_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Commit_removed_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Push(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _Push_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Push_TypeInfo.ValidateArity(item)

        result = cls._Push_Item(item, always_include_optional, process_additional_data)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Push_url(cls, item):
        if item in [DoesNotExist, None]:
            _Push_url_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Push_url_TypeInfo.ValidateArity(item)

        result = cls._Push_url_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _Pushed_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Pushed_TypeInfo.ValidateArity(item)

        result = cls._Pushed_Item(item, always_include_optional, process_additional_data)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Pushed_change_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change_modified(cls, items):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_modified_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Pushed_change_modified_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_modified_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change_added(cls, items):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_added_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Pushed_change_added_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_added_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change_removed(cls, items):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_removed_TypeInfo.ValidateArity(None)
            return DoesNotExist

        _Pushed_change_removed_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_removed_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return results

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_Item(cls, item, always_include_optional, process_additional_data):
        _ChangeInfo_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        result = _CreatePythonObject(
            attributes=None,
        )

        # id
        try:
            setattr(result, "id", cls.ChangeInfo_id(
                cls._GetPythonAttribute(
                    item,
                    "id",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("id")

        # author
        try:
            setattr(result, "author", cls.ChangeInfo_author(
                cls._GetPythonAttribute(
                    item,
                    "author",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("author")

        # date
        try:
            setattr(result, "date", cls.ChangeInfo_date(
                cls._GetPythonAttribute(
                    item,
                    "date",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("date")

        # description
        try:
            setattr(result, "description", cls.ChangeInfo_description(
                cls._GetPythonAttribute(
                    item,
                    "description",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("description")

        # branch
        try:
            setattr(result, "branch", cls.ChangeInfo_branch(
                cls._GetPythonAttribute(
                    item,
                    "branch",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("branch")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"id", "author", "date", "description", "branch"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_id_Item(cls, item):
        return JsonSerialization.SerializeItem(_ChangeInfo_id_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_author_Item(cls, item):
        return JsonSerialization.SerializeItem(_ChangeInfo_author_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_date_Item(cls, item):
        return JsonSerialization.SerializeItem(_ChangeInfo_date_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_description_Item(cls, item):
        return JsonSerialization.SerializeItem(_ChangeInfo_description_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_branch_Item(cls, item):
        return JsonSerialization.SerializeItem(_ChangeInfo_branch_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_Item(cls, item, always_include_optional, process_additional_data):
        _Commit_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        result = _CreatePythonObject(
            attributes=None,
        )

        # modified
        try:
            cls._ApplyOptionalChildren(item, "modified", result, cls.Commit_modified, always_include_optional)
        except:
            _DecorateActiveException("modified")

        # added
        try:
            cls._ApplyOptionalChildren(item, "added", result, cls.Commit_added, always_include_optional)
        except:
            _DecorateActiveException("added")

        # removed
        try:
            cls._ApplyOptionalChildren(item, "removed", result, cls.Commit_removed, always_include_optional)
        except:
            _DecorateActiveException("removed")

        # id
        try:
            setattr(result, "id", cls.ChangeInfo_id(
                cls._GetPythonAttribute(
                    item,
                    "id",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("id")

        # author
        try:
            setattr(result, "author", cls.ChangeInfo_author(
                cls._GetPythonAttribute(
                    item,
                    "author",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("author")

        # date
        try:
            setattr(result, "date", cls.ChangeInfo_date(
                cls._GetPythonAttribute(
                    item,
                    "date",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("date")

        # description
        try:
            setattr(result, "description", cls.ChangeInfo_description(
                cls._GetPythonAttribute(
                    item,
                    "description",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("description")

        # branch
        try:
            setattr(result, "branch", cls.ChangeInfo_branch(
                cls._GetPythonAttribute(
                    item,
                    "branch",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("branch")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"modified", "added", "removed", "id", "author", "date", "description", "branch"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_modified_Item(cls, item):
        return JsonSerialization.SerializeItem(_Commit_modified_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_added_Item(cls, item):
        return JsonSerialization.SerializeItem(_Commit_added_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_removed_Item(cls, item):
        return JsonSerialization.SerializeItem(_Commit_removed_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Push_Item(cls, item, always_include_optional, process_additional_data):
        _Push_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        result = _CreatePythonObject(
            attributes=None,
        )

        # url
        try:
            cls._ApplyOptionalChild(item, "url", result, cls.Push_url, always_include_optional)
        except:
            _DecorateActiveException("url")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"url"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Push_url_Item(cls, item):
        return JsonSerialization.SerializeItem(_Push_url_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_Item(cls, item, always_include_optional, process_additional_data):
        _Pushed_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        result = _CreatePythonObject(
            attributes=None,
        )

        # change
        try:
            cls._ApplyOptionalChildren(item, "change", result, lambda value: cls.Pushed_change(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("change")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"change"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_Item(cls, item, always_include_optional, process_additional_data):
        _Pushed_change_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        result = _CreatePythonObject(
            attributes=None,
        )

        # modified
        try:
            cls._ApplyOptionalChildren(item, "modified", result, cls.Pushed_change_modified, always_include_optional)
        except:
            _DecorateActiveException("modified")

        # added
        try:
            cls._ApplyOptionalChildren(item, "added", result, cls.Pushed_change_added, always_include_optional)
        except:
            _DecorateActiveException("added")

        # removed
        try:
            cls._ApplyOptionalChildren(item, "removed", result, cls.Pushed_change_removed, always_include_optional)
        except:
            _DecorateActiveException("removed")

        # id
        try:
            setattr(result, "id", cls.ChangeInfo_id(
                cls._GetPythonAttribute(
                    item,
                    "id",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("id")

        # author
        try:
            setattr(result, "author", cls.ChangeInfo_author(
                cls._GetPythonAttribute(
                    item,
                    "author",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("author")

        # date
        try:
            setattr(result, "date", cls.ChangeInfo_date(
                cls._GetPythonAttribute(
                    item,
                    "date",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("date")

        # description
        try:
            setattr(result, "description", cls.ChangeInfo_description(
                cls._GetPythonAttribute(
                    item,
                    "description",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("description")

        # branch
        try:
            setattr(result, "branch", cls.ChangeInfo_branch(
                cls._GetPythonAttribute(
                    item,
                    "branch",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("branch")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"modified", "added", "removed", "id", "author", "date", "description", "branch"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_modified_Item(cls, item):
        return JsonSerialization.SerializeItem(_Pushed_change_modified_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_added_Item(cls, item):
        return JsonSerialization.SerializeItem(_Pushed_change_added_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_removed_Item(cls, item):
        return JsonSerialization.SerializeItem(_Pushed_change_removed_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChild(cls, item, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        if always_include_optional:
            setattr(dest, attribute_name, None)

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChildren(cls, items, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            items,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        if always_include_optional:
            setattr(dest, attribute_name, [])

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalAttribute(cls, item, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                dest[attribute_name] = value
                return

        if always_include_optional:
            dest[attribute_name] = None

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyAdditionalData(
        cls,
        source,
        dest,
        exclude_names,
    ):
        for name, child in [(k, v) for k, v in six.iteritems(source if isinstance(source, dict) else source.__dict__) if not k.startswith("_") and k not in exclude_names]:
            try:
                if isinstance(child, list):
                    children = []

                    for index, item in enumerate(child):
                        item_name = "Index {}".format(index)

                        try:
                            children.append(cls._CreateAdditionalDataItem(item_name, item))
                        except:
                            _DecorateActiveException(item_name)

                    setattr(dest, name, children)
                else:
                    setattr(dest, name, cls._CreateAdditionalDataItem(name, child))
            except:
                _DecorateActiveException(name)

    # ----------------------------------------------------------------------
    @classmethod
    def _CreateAdditionalDataItem(cls, name, source):
        if not isinstance(source, dict):
            source = source.__dict__

        attributes = OrderedDict()
        items = OrderedDict()

        for k, v in six.iteritems(source):
            if k.startswith("_"):
                continue

            if k in source["_attribute_names"]:
                attributes[k] = v
            else:
                items[k] = v

        if len(items) == 1 and next(six.iterkeys(items)) == source.get("_text_attribute_name", None):
            return _CreatePythonObject(
                attributes=attributes,
                **{"simple_value": source[source["_text_attribute_name"]], "_text_attribute_name": "simple_value"},
            )

        result = _CreatePythonObject(
            attributes=attributes,
        )

        for k, v in six.iteritems(items):
            try:
                if isinstance(v, list):
                    new_items = []

                    for index, child in enumerate(v):
                        try:
                            new_items.append(cls._CreateAdditionalDataItem("item", child))
                        except:
                            _DecorateActiveException("Index {}".format(index))

                    setattr(result, k, new_items)
                else:
                    new_item = cls._CreateAdditionalDataItem(k, v)

                    setattr(result, k, new_item)
            except:
                _DecorateActiveException(k)

        return result

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetPythonAttribute(
        item,
        attribute_name,
        is_optional=False,
    ):
        if not isinstance(item, dict):
            item = item.__dict__

        value = item.get(attribute_name, DoesNotExist)
        if value is DoesNotExist and not is_optional:
            raise SerializeException("No items were found")

        return value


# ----------------------------------------------------------------------
def _JsonToString(obj, pretty_print):
    if pretty_print:
        content = json.dumps(obj, cls=JsonEncoder, indent=2, separators=[", ", " : "])

        # Remove trailing whitespace
        return "\n".join([line.rstrip() for line in content.split("\n")])

    else:
        return json.dumps(obj, cls=JsonEncoder)


# ----------------------------------------------------------------------
# |
# |  Deserializer
# |
# ----------------------------------------------------------------------
class Deserializer(object):

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _ChangeInfo_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._ChangeInfo_Item(item, always_include_optional, process_additional_data)

        _ChangeInfo_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_id(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_id_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._ChangeInfo_id_Item(item)

        _ChangeInfo_id_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_author(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_author_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._ChangeInfo_author_Item(item)

        _ChangeInfo_author_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_date(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_date_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._ChangeInfo_date_Item(item)

        _ChangeInfo_date_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_description(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_description_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._ChangeInfo_description_Item(item)

        _ChangeInfo_description_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def ChangeInfo_branch(cls, item):
        if item in [DoesNotExist, None]:
            _ChangeInfo_branch_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._ChangeInfo_branch_Item(item)

        _ChangeInfo_branch_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Commit(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _Commit_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._Commit_Item(item, always_include_optional, process_additional_data)

        _Commit_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Commit_modified(cls, items):
        if items in [DoesNotExist, None, []]:
            _Commit_modified_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Commit_modified_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Commit_modified_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Commit_added(cls, items):
        if items in [DoesNotExist, None, []]:
            _Commit_added_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Commit_added_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Commit_added_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Commit_removed(cls, items):
        if items in [DoesNotExist, None, []]:
            _Commit_removed_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Commit_removed_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Commit_removed_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Push(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _Push_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._Push_Item(item, always_include_optional, process_additional_data)

        _Push_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Push_url(cls, item):
        if item in [DoesNotExist, None]:
            _Push_url_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._Push_url_Item(item)

        _Push_url_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            _Pushed_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._Pushed_Item(item, always_include_optional, process_additional_data)

        _Pushed_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Pushed_change_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change_modified(cls, items):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_modified_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_modified_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Pushed_change_modified_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change_added(cls, items):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_added_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_added_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Pushed_change_added_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Pushed_change_removed(cls, items):
        if items in [DoesNotExist, None, []]:
            _Pushed_change_removed_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Pushed_change_removed_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Pushed_change_removed_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # id
        try:
            setattr(result, "id", cls.ChangeInfo_id(
                cls._GetPythonAttribute(
                    item,
                    "id",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("id")

        # author
        try:
            setattr(result, "author", cls.ChangeInfo_author(
                cls._GetPythonAttribute(
                    item,
                    "author",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("author")

        # date
        try:
            setattr(result, "date", cls.ChangeInfo_date(
                cls._GetPythonAttribute(
                    item,
                    "date",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("date")

        # description
        try:
            setattr(result, "description", cls.ChangeInfo_description(
                cls._GetPythonAttribute(
                    item,
                    "description",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("description")

        # branch
        try:
            setattr(result, "branch", cls.ChangeInfo_branch(
                cls._GetPythonAttribute(
                    item,
                    "branch",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("branch")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"id", "author", "date", "description", "branch"},
            )

        _ChangeInfo_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_id_Item(cls, item):
        return JsonSerialization.DeserializeItem(_ChangeInfo_id_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_author_Item(cls, item):
        return JsonSerialization.DeserializeItem(_ChangeInfo_author_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_date_Item(cls, item):
        return JsonSerialization.DeserializeItem(_ChangeInfo_date_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_description_Item(cls, item):
        return JsonSerialization.DeserializeItem(_ChangeInfo_description_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _ChangeInfo_branch_Item(cls, item):
        return JsonSerialization.DeserializeItem(_ChangeInfo_branch_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # modified
        try:
            cls._ApplyOptionalChildren(item, "modified", result, cls.Commit_modified, always_include_optional)
        except:
            _DecorateActiveException("modified")

        # added
        try:
            cls._ApplyOptionalChildren(item, "added", result, cls.Commit_added, always_include_optional)
        except:
            _DecorateActiveException("added")

        # removed
        try:
            cls._ApplyOptionalChildren(item, "removed", result, cls.Commit_removed, always_include_optional)
        except:
            _DecorateActiveException("removed")

        # id
        try:
            setattr(result, "id", cls.ChangeInfo_id(
                cls._GetPythonAttribute(
                    item,
                    "id",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("id")

        # author
        try:
            setattr(result, "author", cls.ChangeInfo_author(
                cls._GetPythonAttribute(
                    item,
                    "author",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("author")

        # date
        try:
            setattr(result, "date", cls.ChangeInfo_date(
                cls._GetPythonAttribute(
                    item,
                    "date",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("date")

        # description
        try:
            setattr(result, "description", cls.ChangeInfo_description(
                cls._GetPythonAttribute(
                    item,
                    "description",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("description")

        # branch
        try:
            setattr(result, "branch", cls.ChangeInfo_branch(
                cls._GetPythonAttribute(
                    item,
                    "branch",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("branch")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"modified", "added", "removed", "id", "author", "date", "description", "branch"},
            )

        _Commit_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_modified_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Commit_modified_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_added_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Commit_added_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Commit_removed_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Commit_removed_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Push_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # url
        try:
            cls._ApplyOptionalChild(item, "url", result, cls.Push_url, always_include_optional)
        except:
            _DecorateActiveException("url")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"url"},
            )

        _Push_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Push_url_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Push_url_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # change
        try:
            cls._ApplyOptionalChildren(item, "change", result, lambda value: cls.Pushed_change(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("change")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"change"},
            )

        _Pushed_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # modified
        try:
            cls._ApplyOptionalChildren(item, "modified", result, cls.Pushed_change_modified, always_include_optional)
        except:
            _DecorateActiveException("modified")

        # added
        try:
            cls._ApplyOptionalChildren(item, "added", result, cls.Pushed_change_added, always_include_optional)
        except:
            _DecorateActiveException("added")

        # removed
        try:
            cls._ApplyOptionalChildren(item, "removed", result, cls.Pushed_change_removed, always_include_optional)
        except:
            _DecorateActiveException("removed")

        # id
        try:
            setattr(result, "id", cls.ChangeInfo_id(
                cls._GetPythonAttribute(
                    item,
                    "id",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("id")

        # author
        try:
            setattr(result, "author", cls.ChangeInfo_author(
                cls._GetPythonAttribute(
                    item,
                    "author",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("author")

        # date
        try:
            setattr(result, "date", cls.ChangeInfo_date(
                cls._GetPythonAttribute(
                    item,
                    "date",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("date")

        # description
        try:
            setattr(result, "description", cls.ChangeInfo_description(
                cls._GetPythonAttribute(
                    item,
                    "description",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("description")

        # branch
        try:
            setattr(result, "branch", cls.ChangeInfo_branch(
                cls._GetPythonAttribute(
                    item,
                    "branch",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("branch")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"modified", "added", "removed", "id", "author", "date", "description", "branch"},
            )

        _Pushed_change_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_modified_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Pushed_change_modified_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_added_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Pushed_change_added_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Pushed_change_removed_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Pushed_change_removed_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChild(cls, item, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        if always_include_optional:
            setattr(dest, attribute_name, None)

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChildren(cls, items, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            items,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        if always_include_optional:
            setattr(dest, attribute_name, [])

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalAttribute(cls, item, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                dest[attribute_name] = value
                return

        if always_include_optional:
            dest[attribute_name] = None

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyAdditionalData(
        cls,
        source,
        dest,
        exclude_names,
    ):
        for name, child in [(k, v) for k, v in six.iteritems(source if isinstance(source, dict) else source.__dict__) if not k.startswith("_") and k not in exclude_names]:
            try:
                if isinstance(child, list):
                    children = []

                    for index, item in enumerate(child):
                        item_name = "Index {}".format(index)

                        try:
                            children.append(cls._CreateAdditionalDataItem(item_name, item))
                        except:
                            _DecorateActiveException(item_name)

                    setattr(dest, name, children)
                else:
                    setattr(dest, name, cls._CreateAdditionalDataItem(name, child))
            except:
                _DecorateActiveException(name)

    # ----------------------------------------------------------------------
    @classmethod
    def _CreateAdditionalDataItem(cls, name, source):
        if not isinstance(source, dict):
            source = source.__dict__

        attributes = OrderedDict()
        items = OrderedDict()

        for k, v in six.iteritems(source):
            if k.startswith("_"):
                continue

            if k in source["_attribute_names"]:
                attributes[k] = v
            else:
                items[k] = v

        if len(items) == 1 and next(six.iterkeys(items)) == source.get("_text_attribute_name", None):
            return _CreatePythonObject(
                attributes=attributes,
                **{"simple_value": source[source["_text_attribute_name"]], "_text_attribute_name": "simple_value"},
            )

        result = _CreatePythonObject(
            attributes=attributes,
        )

        for k, v in six.iteritems(items):
            try:
                if isinstance(v, list):
                    new_items = []

                    for index, child in enumerate(v):
                        try:
                            new_items.append(cls._CreateAdditionalDataItem("item", child))
                        except:
                            _DecorateActiveException("Index {}".format(index))

                    setattr(result, k, new_items)
                else:
                    new_item = cls._CreateAdditionalDataItem(k, v)

                    setattr(result, k, new_item)
            except:
                _DecorateActiveException(k)

        return result

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetPythonAttribute(
        item,
        attribute_name,
        is_optional=False,
    ):
        if not isinstance(item, dict):
            item = item.__dict__

        value = item.get(attribute_name, DoesNotExist)
        if value is DoesNotExist and not is_optional:
            raise SerializeException("No items were found")

        return value


# ----------------------------------------------------------------------
class Object(object):
    def __init__(self):
        self._attribute_names = set()

    def __repr__(self):
        return CommonEnvironment.ObjectReprImpl(self)


# ----------------------------------------------------------------------
def _CreatePythonObject(
    attributes=None,
    **kwargs
):
    attributes = attributes or {}

    result = Object()

    for d in [attributes, kwargs]:
        for k, v in six.iteritems(d):
            setattr(result, k, v)

    for k in six.iterkeys(attributes):
        result._attribute_names.add(k)

    return result


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
def _ValidateUniqueKeys(unique_key_attribute_name, items):
    unique_keys = set()

    for item in items:
        if isinstance(item, dict):
            unique_key = item.get(unique_key_attribute_name)
        else:
            unique_key = getattr(item, unique_key_attribute_name)

        if unique_key in unique_keys:
            raise UniqueKeySerializationException("The unique key '{}' is not unique: '{}'".format(unique_key_attribute_name, unique_key))

        unique_keys.add(unique_key)


# ----------------------------------------------------------------------
def _DecorateActiveException(frame_desc):
    exception = sys.exc_info()[1]

    if not hasattr(exception, "stack"):
        setattr(exception, "stack", [])

    exception.stack.insert(0, frame_desc)

    # <The raise statement is not inside an except clause> pylint: disable = E0704
    raise
