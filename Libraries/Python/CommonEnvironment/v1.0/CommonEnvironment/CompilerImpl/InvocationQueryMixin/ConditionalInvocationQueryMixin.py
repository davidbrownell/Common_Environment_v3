# ----------------------------------------------------------------------
# |  
# |  ConditionalInvocationQueryMixin.py
# |  
# |  David Brownell <db@DavidBrownell.com>
# |      2018-05-19 20:16:44
# |  
# ----------------------------------------------------------------------
# |  
# |  Copyright David Brownell 2018.
# |  Distributed under the Boost Software License, Version 1.0.
# |  (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
# |  
# ----------------------------------------------------------------------
"""Contains the ConditionalInvocationQueryMixin object"""

import os
import sys
import textwrap

from CommonEnvironment import FileSystem
from CommonEnvironment.Interface import abstractmethod

from CommonEnvironment.CompilerImpl.InvocationQueryMixin import InvocationQueryMixin

# ----------------------------------------------------------------------
_script_fullpath = os.path.abspath(__file__) if "python" in sys.executable.lower() else sys.executable
_script_dir, _script_name = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

class ConditionalInvocationQueryMixin(InvocationQueryMixin):

    _FILENAME                               = "Compiler.ConditionalInvocationQueryMixin.data"
    _TEMPLATE                               = textwrap.dedent(
        """\
        - Generated by ConditionalInvocationQueryMixin to track context changes between
        - compilation invocations.
        -
        - ***** Please do not modify this file *****
        {data}
        """)

    # ----------------------------------------------------------------------
    @classmethod
    def _GetOptionalMetadata(cls):
        return [ ( "force", False ),
                 ( "output_data_filename_prefix", '' ),
               ] + super(ConditionalInvocationQueryMixin, cls)._GetOptionalMetadata()

    # ----------------------------------------------------------------------
    @classmethod
    def _GetRequiredContextNames(cls):
        return [ "output_dir",
               ] + super(ConditionalInvocationQueryMixin, cls)._GetRequiredContextNames()

    # ----------------------------------------------------------------------
    @classmethod
    def _CreateContext(cls, metadata):
        metadata["output_dir"] = os.path.realpath(metadata["output_dir"])

        FileSystem.MakeDirs(metadata["output_dir"])

        return super(ConditionalInvocationQueryMixin, cls)._CreateContext(metadata)

    # ----------------------------------------------------------------------
    @abstractmethod
    @staticmethod
    def _GetInvokeReasonImpl(context, output_stream):
        raise Exception("Abstract method")

    
    # ----------------------------------------------------------------------
    @classmethod
    def _PersistContextImpl(cls, context):
        filename = cls._GetContextFilename(context)

        with open(filename, 'w') as f:
            pass # BugBug f.write(cls._TEMPLATE.format(

raise Exception("TODO: Finish this")
