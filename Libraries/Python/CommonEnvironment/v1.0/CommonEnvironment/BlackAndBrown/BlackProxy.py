# ----------------------------------------------------------------------
# |
# |  BlackProxy.py
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2018-12-14 21:14:40
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2018
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
"""Updates python source code with Black and applies additional formatting (Brown)"""

import difflib
import os
import sys
import textwrap
import traceback

import CommonEnvironment
from CommonEnvironment import CommandLine
from CommonEnvironment import StringHelpers

from CommonEnvironment.BlackAndBrown import Executor

# ----------------------------------------------------------------------
_script_fullpath = CommonEnvironment.ThisFullpath()
_script_dir, _script_name = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
@CommandLine.EntryPoint(
    arg=CommandLine.EntryPoint.Parameter("Argument passed to Black"),
)
@CommandLine.Constraints(
    arg=CommandLine.StringTypeInfo(arity="+"), 
    output_stream=None,
)
def Convert(
    arg,
    output_stream=sys.stdout,
):
    """Converts the provided input"""

    args = arg
    del arg
    
    input_filename = args.pop()
    is_diff = False
    
    try:
        for arg in args:
            if arg == "--diff":
                is_diff = True
            elif arg in [ "--quiet", ]:
                # Ignore these
                pass
            else:
                raise Exception("The argument '{}' is not supported".format(arg))

        output = Executor(sys.stdout).Format(input_filename)
        result = 0

    except:
        result = -1

        exception_content = traceback.format_exc()

        if is_diff:
            # This is a bit strange, but if the caller is expecting a diff, we
            # need to display the exception as a diff.
            output = textwrap.dedent(
                """\
                ********************************************************************************
                ********************************************************************************
                ********************************************************************************

                    Exception generated by BlackProxy.py

                        {}

                ********************************************************************************
                ********************************************************************************
                ********************************************************************************
                {}
                """).format(
                    StringHelpers.LeftJustify(exception_content, 8),
                    output,
                )
        else:
            output = exception_content

    if is_diff:
        # Create a diff of the input and generated file
        diff = difflib.unified_diff(
            open(input_filename).readlines(), 
            ["{}\n".format(line) for line in output.split("\n")],
        )
    
        output = "".join(diff)
    
    output_stream.write(output)

    return result

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
if __name__ == "__main__":
    try:
        sys.exit(CommandLine.Main())
    except KeyboardInterrupt:
        pass
