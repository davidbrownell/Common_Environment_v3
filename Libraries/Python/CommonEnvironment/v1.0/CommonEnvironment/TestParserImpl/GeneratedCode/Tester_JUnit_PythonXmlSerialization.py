# --------------------------------------------------------------------------------
# |
# |  WARNING:
# |  This file was generated; any local changes will be overwritten during
# |  future invocations of the generator!
# |
# |  Generated by: <SimpleSchemaGenerator>/Plugins/Impl/PythonSerializationImpl.py
# |  Generated on: 2021-01-01 12:59:21.690898
# |
# --------------------------------------------------------------------------------
import copy
import sys

from collections import OrderedDict

import six

import CommonEnvironment
from CommonEnvironment.TypeInfo import Arity
from CommonEnvironment.TypeInfo.AnyOfTypeInfo import AnyOfTypeInfo
from CommonEnvironment.TypeInfo.ClassTypeInfo import ClassTypeInfo
from CommonEnvironment.TypeInfo.DictTypeInfo import DictTypeInfo
from CommonEnvironment.TypeInfo.GenericTypeInfo import GenericTypeInfo
from CommonEnvironment.TypeInfo.ListTypeInfo import ListTypeInfo

from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.PythonCodeVisitor import PythonCodeVisitor
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.StringSerialization import StringSerialization

# <Unused import> pylint: disable = W0611
# <Unused import> pylint: disable = W0614
from CommonEnvironment.TypeInfo.FundamentalTypes.All import *               # <Wildcard import> pylint: disable = W0401

# <Standard import should be placed before...> pylint: disable = C0411

# ----------------------------------------------------------------------
import xml.etree.ElementTree as ET

from CommonEnvironment import FileSystem
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.XmlSerialization import XmlSerialization

# ----------------------------------------------------------------------
# <Method name "..." doesn't conform to PascalCase naming style> pylint: disable = C0103
# <Line too long> pylint: disable = C0301
# <Too many lines in module> pylint: disable = C0302
# <Wrong hanging indentation> pylint: disable = C0330

# <Too few public methods> pylint: disable = R0903
# <Too many public methods> pylint: disable = R0904
# <Too many branches> pylint: disable = R0912
# <Too many statements> pylint: disable = R0915


# ----------------------------------------------------------------------
class SerializationException(Exception):
    # ----------------------------------------------------------------------
    def __init__(self, ex_or_string):
        if isinstance(ex_or_string, six.string_types):
            super(SerializationException, self).__init__(ex_or_string)
        else:
            super(SerializationException, self).__init__(str(ex_or_string))

            self.__dict__ = copy.deepcopy(ex_or_string.__dict__)

    # ----------------------------------------------------------------------
    def __str__(self):
        result = super(SerializationException, self).__str__()

        if hasattr(self, "stack"):
            result += " [{}]".format(" -> ".join(self.stack))

        return result

    # ----------------------------------------------------------------------
    def __repr__(self):
        return CommonEnvironment.ObjectReprImpl(self)


class KeySerializationException(SerializationException):                    pass
class SerializeException(SerializationException):                           pass
class DeserializeException(SerializationException):                         pass


class DoesNotExist(object):                                                 pass


# ----------------------------------------------------------------------
# |
# |  Utility Methods
# |
# ----------------------------------------------------------------------
def Serialize(
    root,
    process_additional_data=False,
    always_include_optional=False,
    to_string=False,
    pretty_print=False,
):
    return Serialize_testsuites(
        root,
        is_root=False,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,
        to_string=to_string,
        pretty_print=pretty_print,
    )


# ----------------------------------------------------------------------
def Serialize_testsuites(
    item,
    process_additional_data=False,
    always_include_optional=False,
    to_string=False,
    pretty_print=False,
    is_root=False,
):
    """Serializes 'testsuites' from a python object to an XML object (ElementTree)"""

    if not isinstance(item, list):
        if isinstance(item, dict) and "testsuites" in item:
            item = item["testsuites"]
        elif not isinstance(item, dict) and hasattr(item, "testsuites"):
            item = getattr(item, "testsuites")
        elif is_root:
            item = DoesNotExist

    try:
        try:
            item = Serializer().testsuites(
                item,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("testsuites")
    except SerializationException:
        raise
    except Exception as ex:
        raise SerializeException(ex)

    if to_string and item not in [DoesNotExist, None]:
        item = ET.tostring(
            _XmlPrettyPrint(item) if pretty_print else item,
            encoding="utf-8",
            method="xml",
        ).decode("utf-8")

    return item


# ----------------------------------------------------------------------
# |
# |  Type Infos
# |
# ----------------------------------------------------------------------
_testsuites_TypeInfo_Contents                                               = OrderedDict([("testsuite", GenericTypeInfo(arity=Arity.FromString('*')))])
_testsuites_testsuite_TypeInfo_Contents                                     = OrderedDict([("id", GenericTypeInfo()), ("name", GenericTypeInfo()), ("hostname", GenericTypeInfo()), ("timestamp", GenericTypeInfo()), ("time", GenericTypeInfo()), ("tests", GenericTypeInfo()), ("failures", GenericTypeInfo()), ("errors", GenericTypeInfo()), ("skipped", GenericTypeInfo(arity=Arity.FromString('?'))), ("testcase", GenericTypeInfo(arity=Arity.FromString('*'))), ("system-out", GenericTypeInfo(arity=Arity.FromString('?'))), ("system-err", GenericTypeInfo(arity=Arity.FromString('?')))])
_testsuites_testsuite_testcase_TypeInfo_Contents                            = OrderedDict([("name", GenericTypeInfo()), ("classname", GenericTypeInfo(arity=Arity.FromString('?'))), ("time", GenericTypeInfo()), ("failure", GenericTypeInfo(arity=Arity.FromString('*'))), ("error", GenericTypeInfo(arity=Arity.FromString('*')))])
_testsuites_testsuite_testcase_failure_TypeInfo_Contents                    = OrderedDict([("message", GenericTypeInfo()), ("type", GenericTypeInfo()), ("desc", GenericTypeInfo())])

testsuites_TypeInfo                                                         = AnyOfTypeInfo([ClassTypeInfo(_testsuites_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_testsuites_TypeInfo_Contents, require_exact_match=False)])
testsuites_testsuite_TypeInfo                                               = AnyOfTypeInfo([ClassTypeInfo(_testsuites_testsuite_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_testsuites_testsuite_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
testsuites_testsuite_id_TypeInfo                                            = IntTypeInfo()
testsuites_testsuite_name_TypeInfo                                          = StringTypeInfo(min_length=1)
testsuites_testsuite_hostname_TypeInfo                                      = StringTypeInfo(min_length=1)
testsuites_testsuite_timestamp_TypeInfo                                     = DateTimeTypeInfo()
testsuites_testsuite_time_TypeInfo                                          = DurationTypeInfo()
testsuites_testsuite_tests_TypeInfo                                         = FloatTypeInfo(min=0.0)
testsuites_testsuite_failures_TypeInfo                                      = FloatTypeInfo(min=0.0)
testsuites_testsuite_errors_TypeInfo                                        = FloatTypeInfo(min=0.0)
testsuites_testsuite_skipped_TypeInfo                                       = FloatTypeInfo(min=0.0, arity=Arity.FromString('?'))
testsuites_testsuite_testcase_TypeInfo                                      = AnyOfTypeInfo([ClassTypeInfo(_testsuites_testsuite_testcase_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_testsuites_testsuite_testcase_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
testsuites_testsuite_testcase_name_TypeInfo                                 = StringTypeInfo(min_length=1)
testsuites_testsuite_testcase_classname_TypeInfo                            = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
testsuites_testsuite_testcase_time_TypeInfo                                 = DurationTypeInfo()
testsuites_testsuite_testcase_failure_TypeInfo                              = AnyOfTypeInfo([ClassTypeInfo(_testsuites_testsuite_testcase_failure_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_testsuites_testsuite_testcase_failure_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
testsuites_testsuite_testcase_failure__value__TypeInfo                      = StringTypeInfo(min_length=1)
testsuites_testsuite_testcase_failure_message_TypeInfo                      = StringTypeInfo(min_length=1)
testsuites_testsuite_testcase_failure_type_TypeInfo                         = StringTypeInfo(min_length=1)
testsuites_testsuite_testcase_error_TypeInfo                                = AnyOfTypeInfo([ClassTypeInfo(_testsuites_testsuite_testcase_failure_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_testsuites_testsuite_testcase_failure_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
testsuites_testsuite_testcase_error__value__TypeInfo                        = StringTypeInfo(min_length=1)
testsuites_testsuite_testcase_error_message_TypeInfo                        = StringTypeInfo(min_length=1)
testsuites_testsuite_testcase_error_type_TypeInfo                           = StringTypeInfo(min_length=1)
testsuites_testsuite_system_out_TypeInfo                                    = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))
testsuites_testsuite_system_err_TypeInfo                                    = StringTypeInfo(min_length=1, arity=Arity.FromString('?'))

# ----------------------------------------------------------------------
# |
# |  Serializer
# |
# ----------------------------------------------------------------------
class Serializer(object):

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites(cls, item, always_include_optional, process_additional_data):
        if item in [DoesNotExist, None]:
            testsuites_TypeInfo.ValidateArity(None)
            return DoesNotExist

        if not process_additional_data:
            testsuites_TypeInfo.ValidateArity(item)

        result = cls._testsuites_Item(item, always_include_optional, process_additional_data)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            testsuites_testsuite_TypeInfo.ValidateArity(None)
            return DoesNotExist

        if not process_additional_data:
            testsuites_testsuite_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._testsuites_testsuite_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return cls._CreateXmlCollection("testsuite", results)

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_id(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_id_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_id_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_id_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_name(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_name_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_name_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_hostname(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_hostname_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_hostname_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_hostname_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_timestamp(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_timestamp_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_timestamp_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_timestamp_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_time(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_time_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_time_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_time_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_tests(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_tests_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_tests_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_tests_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_failures(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_failures_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_failures_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_failures_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_errors(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_errors_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_errors_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_errors_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_skipped(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_skipped_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_skipped_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_skipped_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            testsuites_testsuite_testcase_TypeInfo.ValidateArity(None)
            return DoesNotExist

        if not process_additional_data:
            testsuites_testsuite_testcase_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._testsuites_testsuite_testcase_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return cls._CreateXmlCollection("testcase", results)

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_name(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_testcase_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_testcase_name_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_testcase_name_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_classname(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_testcase_classname_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_testcase_classname_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_testcase_classname_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_time(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_testcase_time_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_testcase_time_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_testcase_time_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_failure(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            testsuites_testsuite_testcase_failure_TypeInfo.ValidateArity(None)
            return DoesNotExist

        if not process_additional_data:
            testsuites_testsuite_testcase_failure_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._testsuites_testsuite_testcase_failure_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return cls._CreateXmlCollection("failure", results)

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_failure_message(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_testcase_failure_message_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_testcase_failure_message_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_testcase_failure_message_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_failure_type(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_testcase_failure_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_testcase_failure_type_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_testcase_failure_type_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_error(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            testsuites_testsuite_testcase_error_TypeInfo.ValidateArity(None)
            return DoesNotExist

        if not process_additional_data:
            testsuites_testsuite_testcase_error_TypeInfo.ValidateArity(items)

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._testsuites_testsuite_testcase_error_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        return cls._CreateXmlCollection("error", results)

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_error_message(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_testcase_error_message_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_testcase_error_message_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_testcase_error_message_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_testcase_error_type(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_testcase_error_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_testcase_error_type_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_testcase_error_type_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_system_out(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_system_out_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_system_out_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_system_out_Item(item)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def testsuites_testsuite_system_err(cls, item):
        if item in [DoesNotExist, None]:
            testsuites_testsuite_system_err_TypeInfo.ValidateArity(None)
            return DoesNotExist

        testsuites_testsuite_system_err_TypeInfo.ValidateArity(item)

        result = cls._testsuites_testsuite_system_err_Item(item)

        return result

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_Item(cls, item, always_include_optional, process_additional_data):
        testsuites_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        result = _CreateXmlElement(
            "testsuites",
            attributes=None,
        )

        # testsuite
        try:
            cls._ApplyOptionalChildren(item, "testsuite", result, lambda value: cls.testsuites_testsuite(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("testsuite")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"testsuite"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_Item(cls, item, always_include_optional, process_additional_data):
        testsuites_testsuite_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        attributes = OrderedDict()

        # id
        try:
            attributes["id"] = cls.testsuites_testsuite_id(
                cls._GetPythonAttribute(
                    item,
                    "id",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("id")

        # name
        try:
            attributes["name"] = cls.testsuites_testsuite_name(
                cls._GetPythonAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("name")

        # hostname
        try:
            attributes["hostname"] = cls.testsuites_testsuite_hostname(
                cls._GetPythonAttribute(
                    item,
                    "hostname",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("hostname")

        # timestamp
        try:
            attributes["timestamp"] = cls.testsuites_testsuite_timestamp(
                cls._GetPythonAttribute(
                    item,
                    "timestamp",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("timestamp")

        # time
        try:
            attributes["time"] = cls.testsuites_testsuite_time(
                cls._GetPythonAttribute(
                    item,
                    "time",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("time")

        # tests
        try:
            attributes["tests"] = cls.testsuites_testsuite_tests(
                cls._GetPythonAttribute(
                    item,
                    "tests",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("tests")

        # failures
        try:
            attributes["failures"] = cls.testsuites_testsuite_failures(
                cls._GetPythonAttribute(
                    item,
                    "failures",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("failures")

        # errors
        try:
            attributes["errors"] = cls.testsuites_testsuite_errors(
                cls._GetPythonAttribute(
                    item,
                    "errors",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("errors")

        # skipped
        try:
            cls._ApplyOptionalAttribute(item, "skipped", attributes, cls.testsuites_testsuite_skipped, always_include_optional)
        except:
            _DecorateActiveException("skipped")

        result = _CreateXmlElement(
            "testsuite",
            attributes=attributes,
        )

        # testcase
        try:
            cls._ApplyOptionalChildren(item, "testcase", result, lambda value: cls.testsuites_testsuite_testcase(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("testcase")

        # system-out
        try:
            cls._ApplyOptionalChild(item, "system-out", result, cls.testsuites_testsuite_system_out, always_include_optional)
        except:
            _DecorateActiveException("system-out")

        # system-err
        try:
            cls._ApplyOptionalChild(item, "system-err", result, cls.testsuites_testsuite_system_err, always_include_optional)
        except:
            _DecorateActiveException("system-err")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"id", "name", "hostname", "timestamp", "time", "tests", "failures", "errors", "skipped", "testcase", "system-out", "system-err"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_id_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_id_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_name_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_hostname_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_hostname_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_timestamp_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_timestamp_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_time_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_time_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_tests_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_tests_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_failures_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_failures_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_errors_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_errors_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_skipped_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_skipped_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_Item(cls, item, always_include_optional, process_additional_data):
        testsuites_testsuite_testcase_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        attributes = OrderedDict()

        # name
        try:
            attributes["name"] = cls.testsuites_testsuite_testcase_name(
                cls._GetPythonAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("name")

        # classname
        try:
            cls._ApplyOptionalAttribute(item, "classname", attributes, cls.testsuites_testsuite_testcase_classname, always_include_optional)
        except:
            _DecorateActiveException("classname")

        # time
        try:
            attributes["time"] = cls.testsuites_testsuite_testcase_time(
                cls._GetPythonAttribute(
                    item,
                    "time",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("time")

        result = _CreateXmlElement(
            "testcase",
            attributes=attributes,
        )

        # failure
        try:
            cls._ApplyOptionalChildren(item, "failure", result, lambda value: cls.testsuites_testsuite_testcase_failure(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("failure")

        # error
        try:
            cls._ApplyOptionalChildren(item, "error", result, lambda value: cls.testsuites_testsuite_testcase_error(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("error")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"name", "classname", "time", "failure", "error"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_name_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_testcase_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_classname_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_testcase_classname_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_time_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_testcase_time_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_failure_Item(cls, item, always_include_optional, process_additional_data):
        testsuites_testsuite_testcase_failure_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        attributes = OrderedDict()

        # message
        try:
            attributes["message"] = cls.testsuites_testsuite_testcase_failure_message(
                cls._GetPythonAttribute(
                    item,
                    "message",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("message")

        # type
        try:
            attributes["type"] = cls.testsuites_testsuite_testcase_failure_type(
                cls._GetPythonAttribute(
                    item,
                    "type",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("type")

        # <fundamental value>
        try:
            fundamental_value = XmlSerialization.SerializeItem(testsuites_testsuite_testcase_failure__value__TypeInfo, cls._GetPythonAttribute(
                item,
                "desc",
                is_optional=False,
            )
            , **{})
        except:
            _DecorateActiveException("value type")

        result = _CreateXmlElement(
            "failure",
            attributes=attributes,
            text_value=fundamental_value,
        )

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"message", "type", "desc"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_failure_message_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_testcase_failure_message_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_failure_type_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_testcase_failure_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_error_Item(cls, item, always_include_optional, process_additional_data):
        testsuites_testsuite_testcase_error_TypeInfo.ValidateItem(
            item,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        attributes = OrderedDict()

        # message
        try:
            attributes["message"] = cls.testsuites_testsuite_testcase_error_message(
                cls._GetPythonAttribute(
                    item,
                    "message",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("message")

        # type
        try:
            attributes["type"] = cls.testsuites_testsuite_testcase_error_type(
                cls._GetPythonAttribute(
                    item,
                    "type",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("type")

        # <fundamental value>
        try:
            fundamental_value = XmlSerialization.SerializeItem(testsuites_testsuite_testcase_error__value__TypeInfo, cls._GetPythonAttribute(
                item,
                "desc",
                is_optional=False,
            )
            , **{})
        except:
            _DecorateActiveException("value type")

        result = _CreateXmlElement(
            "error",
            attributes=attributes,
            text_value=fundamental_value,
        )

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"message", "type", "desc"},
            )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_error_message_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_testcase_error_message_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_testcase_error_type_Item(cls, item):
        return XmlSerialization.SerializeItem(testsuites_testsuite_testcase_error_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_system_out_Item(cls, item):
        return _CreateXmlElement(
            "system-out",
            text_value=XmlSerialization.SerializeItem(testsuites_testsuite_system_out_TypeInfo, item, **{}),
        )

    # ----------------------------------------------------------------------
    @classmethod
    def _testsuites_testsuite_system_err_Item(cls, item):
        return _CreateXmlElement(
            "system-err",
            text_value=XmlSerialization.SerializeItem(testsuites_testsuite_system_err_TypeInfo, item, **{}),
        )

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChild(cls, item, attribute_name, dest, apply_func, always_include_optional, default_value_func=None):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                dest.append(value)
                return

        if default_value_func:
            dest.append(default_value_func())
            return

        if always_include_optional:
            dest.append(_CreateXmlElement(attribute_name))

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChildren(cls, items, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            items,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                dest.append(value)
                return

        # No default statement

        if always_include_optional:
            dest.append(_CreateXmlElement(attribute_name))

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalAttribute(cls, item, attribute_name, dest, apply_func, always_include_optional, default_value_func=None):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                dest.attrib[attribute_name] = value
                return

        if default_value_func:
            dest.attrib[attribute_name] = default_value_func()
            return

        if always_include_optional:
            dest.attrib[attribute_name] = None

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyAdditionalData(
        cls,
        source,
        dest,
        exclude_names,
    ):
        for name, child in [(k, v) for k, v in six.iteritems(source if isinstance(source, dict) else getattr(source, "__dict__", {})) if not k.startswith("_") and k not in exclude_names]:
            try:
                if isinstance(child, list):
                    children = []

                    for index, item in enumerate(child):
                        item_name = "Index {}".format(index)

                        try:
                            children.append(cls._CreateAdditionalDataItem(item_name, item))
                        except:
                            _DecorateActiveException(item_name)

                    dest.append(cls._CreateXmlCollection(name, children))
                else:
                    dest.append(cls._CreateAdditionalDataItem(name, child))
            except:
                _DecorateActiveException(name)

    # ----------------------------------------------------------------------
    @classmethod
    def _RejectAdditionalData(cls, source, exclude_names):
        errors = []

        for name, child in [(k, v) for k, v in six.iteritems(source if isinstance(source, dict) else getattr(source, "__dict__", {})) if not k.startswith("_") and k not in exclude_names]:
            errors.append(name)

        if errors:
            raise Exception("The item contains unexpected children: {}".format(", ".join(['"{}"'.format(error) for error in errors])))

    # ----------------------------------------------------------------------
    @classmethod
    def _CreateAdditionalDataItem(cls, name, source):
        # The following types should be returned directly without additional conversion
        if isinstance(source, (int, float, str, bool)):
            return source

        assert not isinstance(source, list), source

        if not isinstance(source, dict):
            source = source.__dict__

        source_attribute_names = source.get("_attribute_names", set())

        attributes = OrderedDict()
        items = OrderedDict()

        for k, v in six.iteritems(source):
            if k.startswith("_"):
                continue

            if k in source_attribute_names:
                attributes[k] = v
            else:
                items[k] = v

        if len(items) == 1 and next(six.iterkeys(items)) == source.get("_text_attribute_name", None):
            return _CreateXmlElement(
                name,
                attributes=attributes,
                text_value=source[source["_text_attribute_name"]],
            )

        result = _CreateXmlElement(
            name,
            attributes=attributes,
        )

        for k, v in six.iteritems(items):
            try:
                if isinstance(v, list):
                    new_items = []

                    for index, child in enumerate(v):
                        try:
                            new_items.append(cls._CreateAdditionalDataItem("item", child))
                        except:
                            _DecorateActiveException("Index {}".format(index))

                    result.append(cls._CreateXmlCollection(k, new_items))
                else:
                    new_item = cls._CreateAdditionalDataItem(k, v)

                    result.append(new_item)
            except:
                _DecorateActiveException(k)

        return result

    # ----------------------------------------------------------------------
    @staticmethod
    def _CreateXmlCollection(element_name, items_or_none):
        result = _CreateXmlElement(element_name)

        for item in (items_or_none or []):
            item.tag = "item"
            result.append(item)

        return result

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetPythonAttribute(
        item,
        attribute_name,
        is_optional=False,
    ):
        if not isinstance(item, dict):
            if hasattr(item, "__dict__"):
                item = item.__dict__
            else:
                item = {}

        value = item.get(attribute_name, DoesNotExist)
        if value is DoesNotExist and not is_optional:
            raise SerializeException("No items were found")

        return value


# ----------------------------------------------------------------------
class Object(object):
    def __init__(self):
        self._attribute_names = set()

    def __repr__(self):
        return CommonEnvironment.ObjectReprImpl(self)


# ----------------------------------------------------------------------
def _CreatePythonObject(
    attributes=None,
    **kwargs
):
    attributes = attributes or {}

    result = Object()

    for d in [attributes, kwargs]:
        for k, v in six.iteritems(d):
            setattr(result, k, v)

    for k in six.iterkeys(attributes):
        result._attribute_names.add(k)

    return result


# ----------------------------------------------------------------------
def _CreateXmlElement(
    element_name,
    attributes=None,
    text_value=None,
):
    result = ET.Element(
        element_name,
        attrib=attributes or {},
    )

    if text_value is not None:
        result.text = text_value

    return result


# ----------------------------------------------------------------------
def _XmlPrettyPrint(elem, level=0):
    original = elem

    i = "\n" + level * "  "

    if elem:
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i

        for child in elem:
            _XmlPrettyPrint(child, level + 1)

        # <Using possibly undefined loop variable 'child'> pylint: disable = W0631
        if not child.tail or not child.tail.strip():
            child.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

    return original


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
def _DecorateActiveException(frame_desc):
    exception = sys.exc_info()[1]

    if not hasattr(exception, "stack"):
        setattr(exception, "stack", [])

    exception.stack.insert(0, frame_desc)

    # <The raise statement is not inside an except clause> pylint: disable = E0704
    raise
